# Tsert.Com Copyright (C) 2015 <CreativeCommons-NC>.

#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.8.2)
PROJECT (meawm)
SET (APPLICATION_NAME "meawm")
SET (APPLICATION_CODENAME "meawm")
#SET (APPLICATION_CODENAME "${PROJECT_NAME}")
SET (APPLICATION_COPYRIGHT_YEARS "2015")
SET (APPLICATION_VERSION_MAJOR 1)
SET (APPLICATION_VERSION_MINOR 0)
SET (APPLICATION_VERSION_PATCH 0)
SET (APPLICATION_VERSION_TYPE beta)
#SET (APPLICATION_VERSION_TYPE SNAPSHOT)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "tsert.com")
SET (APPLICATION_VENDOR_NAME "Tsert.Com")
SET (APPLICATION_VENDOR_URL "www.breezeos.com")

SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")

#
# Target processor
#
SET(NULLARG "")
SET(ARCH "$ENV{ARCH}")
SET(MARCH "$ENV{MARCH}")
IF (ARCH STREQUAL NULLARG)
	SET(ARCH "i486")
	SET (CMAKE_SYSTEM_PROCESSOR "i486")
	SET(CMAKE_CXX_FLAGS "-march=i486 ${CMAKE_CXX_FLAGS}" )
ELSE (ARCH STREQUAL NULLARG)
	# i486 i686 x86_64 athlon64 corei7
	SET (CMAKE_SYSTEM_PROCESSOR "${ARCH}")
	SET (CMAKE_C_FLAGS "-march=${MARCH} ${CMAKE_CXX_FLAGS}" )
	SET (CMAKE_CXX_FLAGS "-march=${MARCH} ${CMAKE_CXX_FLAGS}" )
ENDIF (ARCH STREQUAL NULLARG)

#
# Package Compression Type
#
SET(CMAKE_ZIPMODE "$ENV{CMAKE_ZIPMODE}")
IF (CMAKE_ZIPMODE STREQUAL NULLARG)
	SET(CMAKE_ZIPMODE "TGZ")
ENDIF (CMAKE_ZIPMODE STREQUAL NULLARG)

#
# Install path
#
SET (CMAKE_INSTALL_PREFIX "/usr")

#
# Type of compilation
#
IF(NOT CMAKE_BUILD_TYPE)
#   SET (CMAKE_BUILD_TYPE "Release")
#  SET (CMAKE_BUILD_TYPE "RelWithDebInfo")
   SET (CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)

#
# Debugging Options -- Use 1 for debugging, 0 for release
#
SET (CMAKE_VERBOSE_MAKEFILE 1)
#SET (CMAKE_BUILD_WITH_INSTALL_RPATH 1)
SET (CMAKE_SKIP_BUILD_RPATH 1)

#
# Do not create static library
#
SET (BUILD_SHARED_LIBS 1)
SET (CREATE_STATIC_LIBRARY 1)

#
# Prepend include directories
#
SET (CMAKE_INCLUDE_DIRECTORIES_BEFORE 1)

INCLUDE(TestForANSIStreamHeaders)
INCLUDE(CheckTypeSize)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckCXXCompilerFlag)
INCLUDE(TestForSTDNamespace)
INCLUDE(TestForANSIForScope)
INCLUDE(TestForSSTREAM)
INCLUDE(FindPkgConfig)
INCLUDE(UsePkgConfig)

#
# Check headers
#
SET(INCLUDES "")

MACRO (LA_CHECK_INCLUDE_FILE header var)
	CHECK_INCLUDE_FILES("${INCLUDES};${header}" ${var})
	IF (${var})
		SET(INCLUDES ${INCLUDES} ${header})
#		ADD_DEFINITIONS(-D${var})
	ENDIF (${var})
ENDMACRO (LA_CHECK_INCLUDE_FILE)

# Alphabetize the rest unless there's a compelling reason
LA_CHECK_INCLUDE_FILE("acl/libacl.h" HAVE_ACL_LIBACL_H)

LA_CHECK_INCLUDE_FILE("libgen.h" HAVE_LIBGEN_H)
LA_CHECK_INCLUDE_FILE("ctype.h" HAVE_CTYPE_H)
LA_CHECK_INCLUDE_FILE("copyfile.h" HAVE_COPYFILE_H)
LA_CHECK_INCLUDE_FILE("direct.h" HAVE_DIRECT_H)
LA_CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DLFCN_H)
LA_CHECK_INCLUDE_FILE("errno.h" HAVE_ERRNO_H)

LA_CHECK_INCLUDE_FILE("fcntl.h" HAVE_FCNTL_H)
LA_CHECK_INCLUDE_FILE("grp.h" HAVE_GRP_H)
LA_CHECK_INCLUDE_FILE("inttypes.h" HAVE_INTTYPES_H)
LA_CHECK_INCLUDE_FILE("io.h" HAVE_IO_H)
LA_CHECK_INCLUDE_FILE("langinfo.h" HAVE_LANGINFO_H)
LA_CHECK_INCLUDE_FILE("limits.h" HAVE_LIMITS_H)

LA_CHECK_INCLUDE_FILE("locale.h" HAVE_LOCALE_H)
LA_CHECK_INCLUDE_FILE("memory.h" HAVE_MEMORY_H)
LA_CHECK_INCLUDE_FILE("paths.h" HAVE_PATHS_H)
LA_CHECK_INCLUDE_FILE("poll.h" HAVE_POLL_H)
LA_CHECK_INCLUDE_FILE("process.h" HAVE_PROCESS_H)
LA_CHECK_INCLUDE_FILE("pthread.h" HAVE_PTHREAD_H)
LA_CHECK_INCLUDE_FILE("pwd.h" HAVE_PWD_H)

LA_CHECK_INCLUDE_FILE("regex.h" HAVE_REGEX_H)
LA_CHECK_INCLUDE_FILE("signal.h" HAVE_SIGNAL_H)
LA_CHECK_INCLUDE_FILE("spawn.h" HAVE_SPAWN_H)
LA_CHECK_INCLUDE_FILE("stdio.h" HAVE_STDIO_H)
LA_CHECK_INCLUDE_FILE("stdarg.h" HAVE_STDARG_H)
LA_CHECK_INCLUDE_FILE("stdint.h" HAVE_STDINT_H)
LA_CHECK_INCLUDE_FILE("stdlib.h" HAVE_STDLIB_H)
LA_CHECK_INCLUDE_FILE("string.h" HAVE_STRING_H)
LA_CHECK_INCLUDE_FILE("strings.h" HAVE_STRINGS_H)
LA_CHECK_INCLUDE_FILE("sys/acl.h" HAVE_SYS_ACL_H)
LA_CHECK_INCLUDE_FILE("sys/cdefs.h" HAVE_SYS_CDEFS_H)
LA_CHECK_INCLUDE_FILE("sys/ioctl.h" HAVE_SYS_IOCTL_H)
LA_CHECK_INCLUDE_FILE("sys/mkdev.h" HAVE_SYS_MKDEV_H)
LA_CHECK_INCLUDE_FILE("sys/mount.h" HAVE_SYS_MOUNT_H)
LA_CHECK_INCLUDE_FILE("sys/param.h" HAVE_SYS_PARAM_H)
LA_CHECK_INCLUDE_FILE("sys/poll.h" HAVE_SYS_POLL_H)
LA_CHECK_INCLUDE_FILE("sys/select.h" HAVE_SYS_SELECT_H)
LA_CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
LA_CHECK_INCLUDE_FILE("sys/statfs.h" HAVE_SYS_STATFS_H)
LA_CHECK_INCLUDE_FILE("sys/statvfs.h" HAVE_SYS_STATVFS_H)
LA_CHECK_INCLUDE_FILE("sys/time.h" HAVE_SYS_TIME_H)
LA_CHECK_INCLUDE_FILE("sys/utime.h" HAVE_SYS_UTIME_H)
LA_CHECK_INCLUDE_FILE("sys/types.h" HAVE_SYS_TYPES_H)
LA_CHECK_INCLUDE_FILE("sys/utsname.h" HAVE_SYS_UTSNAME_H)
LA_CHECK_INCLUDE_FILE("sys/vfs.h" HAVE_SYS_VFS_H)
LA_CHECK_INCLUDE_FILE("sys/wait.h" HAVE_SYS_WAIT_H)
LA_CHECK_INCLUDE_FILE("time.h" HAVE_TIME_H)
LA_CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)
LA_CHECK_INCLUDE_FILE("utime.h" HAVE_UTIME_H)
LA_CHECK_INCLUDE_FILE("wchar.h" HAVE_WCHAR_H)
LA_CHECK_INCLUDE_FILE("wctype.h" HAVE_WCTYPE_H)

#
# Check for integer types
#
#
CHECK_TYPE_SIZE("short" SIZE_OF_SHORT)
CHECK_TYPE_SIZE("int" SIZE_OF_INT)
CHECK_TYPE_SIZE("long" SIZE_OF_LONG)
CHECK_TYPE_SIZE("long long"     SIZE_OF_LONG_LONG)

CHECK_TYPE_SIZE("unsigned short" SIZE_OF_UNSIGNED_SHORT)
CHECK_TYPE_SIZE("unsigned" SIZE_OF_UNSIGNED)
CHECK_TYPE_SIZE("unsigned long" SIZE_OF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZE_OF_UNSIGNED_LONG_LONG)

CHECK_TYPE_SIZE("__int64" __INT64)
CHECK_TYPE_SIZE("unsigned __int64" UNSIGNED___INT64)

CHECK_TYPE_SIZE(int16_t INT16_T)
CHECK_TYPE_SIZE(int32_t INT32_T)
CHECK_TYPE_SIZE(int64_t INT64_T)
CHECK_TYPE_SIZE(intmax_t INTMAX_T)
CHECK_TYPE_SIZE(uint8_t UINT8_T)
CHECK_TYPE_SIZE(uint16_t UINT16_T)
CHECK_TYPE_SIZE(uint32_t UINT32_T)
CHECK_TYPE_SIZE(uint64_t UINT64_T)
CHECK_TYPE_SIZE(uintmax_t UINTMAX_T)

CHECK_TYPE_SIZE(off_t OFF_T)
IF(NOT HAVE_OFF_T)
	SET(off_t "__int64")
ENDIF(NOT HAVE_OFF_T)

ADD_DEFINITIONS(-DHAVE_CONFIG_H)

CHECK_TYPE_SIZE(ssize_t SSIZE_T)
IF(NOT HAVE_SSIZE_T)
	IF("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
		SET(ssize_t "int64_t")
	ELSE("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
		SET(ssize_t "long")
	ENDIF("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
ENDIF(NOT HAVE_SSIZE_T)

CHECK_TYPE_SIZE(uid_t UID_T)
IF(NOT HAVE_UID_T)
	IF(WIN32)
		SET(uid_t "short")
	ELSE(WIN32)
		SET(uid_t "unsigned int")
	ENDIF(WIN32)
ENDIF(NOT HAVE_UID_T)

CHECK_TYPE_SIZE(pid_t PID_T)
IF(NOT HAVE_PID_T)
	IF(WIN32)
		SET(pid_t "int")
	ELSE(WIN32)
		MESSAGE(FATAL_ERROR "pid_t doesn't exist on this platform?")
	ENDIF(WIN32)
ENDIF(NOT HAVE_PID_T)

#
# Configure Compile Flags
#
IF(CMAKE_COMPILER_IS_GNU_CXX)
	ADD_DEFINITIONS(-Wall -Werror)
ENDIF(CMAKE_COMPILER_IS_GNU_CXX)

SET(CMAKE_REQUIRED_FLAGS "-Wall -Wformat -Wformat-security")
#SET(CMAKE_REQUIRED_LIBRARIES "uuid")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99" )
#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wformat -Wformat-security" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic -fPIC -DPIC" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=default" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-all" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer" )

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic" )
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive" )
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wformat -Wformat-security" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -fPIC -DPIC" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=default" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-all" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer" )

#
# Configure Load Flags
#
# system librarys
#find_library(M_LIB m)
#find_library(RT_LIB rt)
#find_library(CRYPTO_LIB crypt)

LINK_LIBRARIES("m")
LINK_LIBRARIES("rt")
LINK_LIBRARIES("pthread")

# Get the compiler command line to build this project.
SET(CXX "$ENV{CXX}")
SET(DISTRO "$ENV{DISTRO}")
SET(GNU_CXX_VERSION "4.8.2")

IF (NOT DEFINED DISTRO OR DISTRO STREQUAL "")
    SET (DISTRO "slackware")
ENDIF (NOT DEFINED DISTRO OR DISTRO STREQUAL "")

IF (CMAKE_C_COMPILER_ID MATCHES "^Gnu$")
	#IF (CXX STREQUAL "g++" OR CXX STREQUAL "/usr/bin/g++")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic")
ENDIF (CMAKE_C_COMPILER_ID MATCHES "^Gnu$")

FIND_FILE(CXX_FOUND c++config.h PATHS "/usr/include/c++/${GNU_CXX_VERSION}/${ARCH}-${DISTRO}-linux/bits/")

IF (NOT CXX_FOUND)
    MESSAGE(STATUS "Distribution: '${DISTRO}'")
    MESSAGE(FATAL_ERROR "CXX file c++config.h not found !")
ENDIF (NOT CXX_FOUND)

SET(CMAKE_CXX_LDFLAGS " -fpic -fPIC -DPIC ${CMAKE_CXX_LDFLAGS}" )

IF (CMAKE_C_COMPILER_ID MATCHES "^Clang$")
	SET(CMAKE_CXX_FLAGS "-x c++ ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "-stdlib=libstdc++ ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "-Qunused-arguments ${CMAKE_CXX_FLAGS}")

	INCLUDE (CMakeForceCompiler)
	SET(CMAKE_SYSTEM_NAME Generic)
	CMAKE_FORCE_C_COMPILER (clang LLVM-Clang)
	CMAKE_FORCE_CXX_COMPILER (clang LLVM-Clang)

	SET(CMAKE_CXX_FLAGS "-I/usr/include/c++/${GNU_CXX_VERSION}/ -I/usr/include/c++/${GNU_CXX_VERSION}/${ARCH}-${DISTRO}-linux/ -I/usr/include/c++/${GNU_CXX_VERSION}/${ARCH}-${DISTRO}-linux/bits/ ${CMAKE_CXX_FLAGS}")

ENDIF(CMAKE_C_COMPILER_ID MATCHES "^Clang$")

IF (CMAKE_C_COMPILER_ID MATCHES "^dlang$")
	INCLUDE (CMakeForceCompiler)
	SET(CMAKE_SYSTEM_NAME Generic)
	CMAKE_FORCE_C_COMPILER (dlang LLVM-Dlang)
	CMAKE_FORCE_CXX_COMPILER (dlang LLVM-Dlang)
ENDIF (CMAKE_C_COMPILER_ID MATCHES "^dlang$")

#
# Add Preprocessor Defines
#
#-DXFT -DSHAPE -DRANDR -DPIXMAP -DRENDER -DXINERAMA
ADD_DEFINITIONS(
	-DMITSHM
	-DDEBUG
	-DDEBUG_WINDOW
	-DDEBUG_EVENTS
	-DFOCUS_DEBUG
	-D_COMPTON_LIB_ 
	-D_FILE_OFFSET_BITS=64
	-D_GNU_SOURCE
	-D_REENTRANT
)

SET(CONFIG_C2 1)
SET(USE_CONSOLEKIT 0)
SET(CONFIG_DBUS 1)
SET(CONFIG_XSYNC 1)
SET(CONFIG_LIBCONFIG 1)
SET(CONFIG_REGEX_PCRE 1)
SET(CONFIG_VSYNC_DRM 1)
SET(CONFIG_VSYNC_OPENGL 1)
SET(CONFIG_VSYNC_OPENGL_GLSL 1)
SET(CONFIG_VSYNC_OPENGL_FBO 1)
SET(CONFIG_VSYNC_OPENGL_VBO 1)
SET(CONFIG_XINERAMA 1)

IF(CONFIG_C2)
	ADD_DEFINITIONS("-DCONFIG_C2")
ENDIF(CONFIG_C2)

IF (CONFIG_DBUS)
	ADD_DEFINITIONS("-DCONFIG_DBUS")
ENDIF(CONFIG_DBUS)

IF (CONFIG_XSYNC)
	ADD_DEFINITIONS("-DCONFIG_XSYNC")
ENDIF(CONFIG_XSYNC)

IF (CONFIG_LIBCONFIG)
	ADD_DEFINITIONS("-DCONFIG_LIBCONFIG")
ENDIF(CONFIG_LIBCONFIG)

IF (CONFIG_REGEX_PCRE)
	ADD_DEFINITIONS("-DCONFIG_REGEX_PCRE")
ENDIF(CONFIG_REGEX_PCRE)

IF (CONFIG_VSYNC_DRM)
	ADD_DEFINITIONS("-DCONFIG_VSYNC_DRM")
ENDIF(CONFIG_VSYNC_DRM)

IF (CONFIG_VSYNC_OPENGL)
	ADD_DEFINITIONS("-DCONFIG_VSYNC_OPENGL")
ENDIF(CONFIG_VSYNC_OPENGL)

IF (CONFIG_VSYNC_OPENGL_GLSL)
	ADD_DEFINITIONS("-DCONFIG_VSYNC_OPENGL_GLSL")
ENDIF(CONFIG_VSYNC_OPENGL_GLSL)

IF (CONFIG_VSYNC_OPENGL_FBO)
	ADD_DEFINITIONS("-DCONFIG_VSYNC_OPENGL_FBO")
ENDIF(CONFIG_VSYNC_OPENGL_FBO)

IF (CONFIG_VSYNC_OPENGL_VBO)
	ADD_DEFINITIONS("-DCONFIG_VSYNC_OPENGL_VBO")
ENDIF(CONFIG_VSYNC_OPENGL_VBO)

IF (CONFIG_XINERAMA)
	ADD_DEFINITIONS("-DCONFIG_XINERAMA")
ENDIF(CONFIG_XINERAMA)

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY "${MAINFOLDER}/lib")

#
# Set pkg-config Search Paths
#
SET(ENV{PKG_CONFIG_PATH}
	"/usr/lib/${ARCH}-linux-gnu/pkgconfig"
	"/usr/share/pkgconfig"
	"/usr/lib/pkgconfig"
)
#	"/opt/lib/pkgconfig"

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")

#SET (CMAKE_MODULE_PATH "${MAINFOLDER}/cmake")
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")
SET (CMAKE_MODULE_PATH
	"/usr/share/cmake/Modules"
	"/usr/share/cmake-3.2/Modules"
	"/var/cache/cmake/Modules"
	"${MAINFOLDER}/cmake/"
)

INCLUDE_DIRECTORIES(BEFORE "${MAINFOLDER}/include")
INCLUDE_DIRECTORIES(BEFORE "${MAINFOLDER}/src")
#INCLUDE(FILE "${MAINFOLDER}/include")
LINK_DIRECTORIES( "${MAINFOLDER}/lib")

# FreeType2
FIND_PACKAGE(Freetype REQUIRED)
IF(FREETYPE_FOUND)
	MESSAGE("\tFreeType2 Found")
	LINK_LIBRARIES(${FREETYPE_LIBRARIES})
	INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
	MESSAGE(STATUS "Freetype Paths ${FREETYPE_INCLUDE_DIRS}")
	MESSAGE(STATUS "Freetype Libraries ${FREETYPE_LIBRARIES}")
ENDIF(FREETYPE_FOUND)

# Fontconfig
#FIND_PACKAGE(FONTCONFIG REQUIRED)
#IF(FONTCONFIG_FOUND)
#	MESSAGE("\tFontConfig Found")
#	LINK_LIBRARIES(${FONTCONFIG_LIBRARY})
#	INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIR})
#ENDIF(FONTCONFIG_FOUND)

# Imlib2
SET(IMLIB2_DIR ${CMAKE_MODULE_PATH})
FIND_PACKAGE(IMLIB2 REQUIRED)
IF(IMLIB2_FOUND)
	MESSAGE("\tIMLIB2 Found")
	LINK_LIBRARIES(${IMLIB2_LIBRARY})
	INCLUDE_DIRECTORIES(${IMLIB2_INCLUDE_DIR})
	MESSAGE(STATUS "Imlib2 Paths ${IMLIB2_INCLUDE_DIR}")
	MESSAGE(STATUS "Imlib2 Libraries ${IMLIB2_LIBRARY}")
ELSE(IMLIB2_FOUND)
	MESSAGE("\tIMLIB2 Not Found")
ENDIF(IMLIB2_FOUND)

FIND_PACKAGE(CAIRO REQUIRED)
IF(CAIRO_FOUND)
	MESSAGE("\tCAIRO Found")
	LINK_LIBRARIES(${CAIRO_LIBRARY})
	INCLUDE_DIRECTORIES(${CAIRO_INCLUDE_DIR})
	MESSAGE(STATUS "CAIRO Paths ${CAIRO_INCLUDE_DIR}")
	MESSAGE(STATUS "CAIRO Libraries ${CAIRO_LIBRARY}")
ELSE(CAIRO_FOUND)
	MESSAGE("\tCAIRO Not Found")
ENDIF(CAIRO_FOUND)

# ConsoleKit
IF(USE_CONSOLEKIT)
	FIND_PACKAGE(CkConnector)
	MESSAGE("\tConsoleKit Enabled")
	IF(CKCONNECTOR_FOUND)
		MESSAGE("\tConsoleKit Found")
		# DBus check
		FIND_PACKAGE(DBus REQUIRED)
		IF(DBUS_FOUND)
			MESSAGE("\tDBus Found")
			LINK_LIBRARIES(${DBUS_LIBRARIES})
			INCLUDE_DIRECTORIES(${DBUS_ARCH_INCLUDE_DIR})
			INCLUDE_DIRECTORIES(${DBUS_INCLUDE_DIR})
			LINK_LIBRARIES(${CKCONNECTOR_LIBRARIES})
			INCLUDE_DIRECTORIES(${CKCONNECTOR_INCLUDE_DIR})
		ELSE(DBUS_FOUND)
			MESSAGE("\tDBus Not Found")
		ENDIF(DBUS_FOUND)
	ELSE(CKCONNECTOR_FOUND)
		MESSAGE("\tConsoleKit Not Found")
		MESSAGE("\tConsoleKit disabled")
	ENDIF(CKCONNECTOR_FOUND)
ELSE(USE_CONSOLEKIT)
	MESSAGE("\tConsoleKit disabled")
ENDIF(USE_CONSOLEKIT)

FIND_PACKAGE (GLEW REQUIRED)
IF (GLEW_FOUND)
	INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIR})
	LINK_LIBRARIES (${GLEW_LIBRARIES})
	MESSAGE(STATUS "GLEW paths ${GLEW_INCLUDE_DIR}")
	MESSAGE(STATUS "GLEW Libraries ${GLEW_LIBRARIES}")
ENDIF(GLEW_FOUND)

FIND_PACKAGE (OpenGL REQUIRED)
IF (OPENGL_FOUND)
	INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
	LINK_LIBRARIES (${OPENGL_LIBRARY})
	MESSAGE(STATUS "OpenGL paths ${OPENGL_INCLUDE_DIR}")
	MESSAGE(STATUS "OpenGL Libraries ${OPENGL_LIBRARY}")
ENDIF(OPENGL_FOUND)

FIND_PACKAGE (GLUT REQUIRED)
IF (GLUT_FOUND)
	INCLUDE_DIRECTORIES(${GLUT_INCLUDE_DIR})
	LINK_LIBRARIES (${GLUT_LIBRARIES})
	MESSAGE(STATUS "GLUT Paths ${GLUT_INCLUDE_DIR} /usr/include/GL")
	MESSAGE(STATUS "GLUT Libraries ${GLUT_LIBRARIES}")
ENDIF(GLUT_FOUND)

FIND_PACKAGE (X11 REQUIRED)
IF (X11_FOUND)
	INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
	LINK_LIBRARIES (${X11_LIBRARIES} ${X11_Xrandr_LIB} ${X11_Xrender_LIB} ${X11_Xinerama_LIB} ${X11_Xcomposite_LIB} ${X11_Xfixes_LIB} ${X11_Xdamage_LIB} ${X11_Xext_LIB} ${X11_Xft_LIB})
	MESSAGE(STATUS "X11 paths ${X11_INCLUDE_DIR}")
	MESSAGE(STATUS "X11 Libraries ${X11_LIBRARIES}")
ENDIF(X11_FOUND)

FIND_PACKAGE (DBus REQUIRED)
IF (DBUS_FOUND)
	INCLUDE_DIRECTORIES(${DBUS_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(${DBUS_ARCH_INCLUDE_DIR})
	LINK_LIBRARIES (${DBUS_LIBRARIES})

	MESSAGE(STATUS "DBus Paths ${DBUS_INCLUDE_DIR}")
	MESSAGE(STATUS "DBus Libraries ${DBUS_LIBRARIES}")
ENDIF(DBUS_FOUND)

# --- Find libpcre ---
IF (CONFIG_REGEX_PCRE)
	PKG_CHECK_MODULES(LIBPCRE REQUIRED libpcre>=8.12)
	ADD_DEFINITIONS(${LIBPCRE_CFLAGS})
	LINK_LIBRARIES(${LIBPCRE_LDFLAGS})
	MESSAGE(STATUS "PCRE Paths ${LIBPCRE_CFLAGS}")
	MESSAGE(STATUS "PCRE Libraries ${LIBPCRE_LDFLAGS}")
ENDIF(CONFIG_REGEX_PCRE)

# --- Find libconfig ---
IF (CONFIG_LIBCONFIG)
	PKG_CHECK_MODULES(LIBCONFIG REQUIRED libconfig>=1.3.2)
	ADD_DEFINITIONS(${LIBCONFIG_CFLAGS})
	LINK_LIBRARIES(${LIBCONFIG_LDFLAGS})
	IF (LIBCONFIG_VERSION VERSION_LESS 1.4)
		ADD_DEFINITIONS(-DCONFIG_LIBCONFIG_LEGACY)
		MESSAGE(STATUS "libconfig-1.3* detected. Enable legacy mode.")
	ENDIF ()
ENDIF(CONFIG_LIBCONFIG)

# --- Find libdbus ---
IF (CONFIG_DBUS)
	PKG_CHECK_MODULES(DBUS REQUIRED dbus-1)
	ADD_DEFINITIONS(${DBUS_CFLAGS})
	LINK_LIBRARIES(${DBUS_LDFLAGS})
	MESSAGE(STATUS "DBus CFlags ${DBUS_CFLAGS}")
	MESSAGE(STATUS "DBus LDFlags ${DBUS_LDFLAGS}")
ENDIF(CONFIG_DBUS)

# --- Find libdrm ---
IF (CONFIG_VSYNC_DRM)
	PKG_CHECK_MODULES(LIBDRM REQUIRED libdrm)
	# We only use its header file
	ADD_DEFINITIONS(${LIBDRM_CFLAGS})
	MESSAGE(STATUS "Libdrm CFlags ${LIBDRM_CFLAGS}")
ENDIF(CONFIG_VSYNC_DRM)
#
# Configure Files
#
#FILE (GLOB LIB_Sources lib/*hh lib/*.cc)
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS5 test/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS6 test/*.h.in.cmake)

LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")

FOREACH (CONFIGINPUT ${CONFIGINPUTS})
STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
ADD_SUBDIRECTORY(docs)
ADD_SUBDIRECTORY(src)

#
# Add Install Targets
#
#SET (PROJECT_INCLUDES "${MAINFOLDER}/include/${PROJECT_NAME}")
#IF (EXISTS "${PROJECT_INCLUDES}" AND IS_DIRECTORY "${PROJECT_INCLUDES}")
#    INSTALL(DIRECTORY "${PROJECT_INCLUDES}" DESTINATION "include")
#ENDIF (EXISTS "${PROJECT_INCLUDES}" AND IS_DIRECTORY "${PROJECT_INCLUDES}")

#IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
#INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
#ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")

INSTALL(FILES
	"${MAINFOLDER}/bin/startmeawm" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/bin/"
)

INSTALL(FILES
	"${MAINFOLDER}/data/xinitrc.meawm" DESTINATION "/etc/X11/xinit/"
	PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ
	OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE
)

INSTALL(FILES
	"${MAINFOLDER}/data/rcfile" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(FILES
	"${MAINFOLDER}/data/menu" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(FILES
	"${MAINFOLDER}/data/menu.plain" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(FILES
	"${MAINFOLDER}/data/menu.hardened" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(FILES
	"${MAINFOLDER}/data/rcfile" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(DIRECTORY
	"${MAINFOLDER}/data/styles" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(DIRECTORY
	"${MAINFOLDER}/data/xsessions" USE_SOURCE_PERMISSIONS DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share"
)

INSTALL(DIRECTORY
	"${MAINFOLDER}/data/backgrounds" USE_SOURCE_PERMISSIONS DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(DIRECTORY
	"${MAINFOLDER}/data/scripts" USE_SOURCE_PERMISSIONS DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

INSTALL(DIRECTORY
	"${MAINFOLDER}/data/actions" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
)

#INSTALL(DIRECTORY
#	"${MAINFOLDER}/data/themes" DESTINATION
#	"${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}"
#)

INSTALL(FILES
	"docs/meawm.1" DESTINATION
	"${CMAKE_INSTALL_PREFIX}/man/man1" COMPONENT doc
)

#
# Add Documentation Targets
#
INCLUDE (DocumentationTargets)

SET(CPACK_PACKAGE_VENDOR "Tsert.Com")
SET(CPACK_GENERATOR "${CMAKE_ZIPMODE}")
SET(CPACK_STRIP_FILES 1)
SET(CPACK_PACKAGE_VERSION_MAJOR 1)
SET(CPACK_PACKAGE_VERSION_MINOR 0)
SET(CPACK_PACKAGE_VERSION_PATCH "0-RC1")
SET(CPACK_SOURCE_GENERATOR "${CMAKE_ZIPMODE}")
SET(CPACK_PACKAGE_FILE_NAME ${PROJECT_NAME}_${APPLICATION_VERSION_STRING}_${ARCH})
SET(CPACK_SOURCE_PACKAGE_FILE_NAME ${PROJECT_NAME}_${APPLICATION_VERSION_STRING}_${ARCH})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/var/distro/archives/${ARCH}")
SET(CPACK_SOURCE_IGNORE_FILES
"^.*(/CVS/|/[.]svn/|/[.]git/|[.]swp$|[.]#|/#|.*~|cscope).*$"
	#   "^.*(/CVS/;/[.]svn/;/[.]git/;[.]swp$;[.]#;/#;.*~;cscope).*$"
)
SET(
	CPACK_RESOURCE_FILE_LICENSE
	"${MAINFOLDER}/thirdparty/licenses/CC-BY-NC-SA-4.0.txt"
)
INCLUDE(CPack)

# Obfuscate files here ...
SET(OBFUSCATE "$ENV{CXXOBFUSCATE}")
IF (OBFUSCATE STREQUAL "yes")
	SET(CXXPROJ "$ENV{CXXPROJ}")
	IF (CXXPROJ STREQUAL NULLARG)
		MESSAGE(FATAL_ERROR "Project name missing -- needed for obfuscation !")
	ENDIF (CXXPROJ STREQUAL NULLARG)

	SET(CXXFOLDERS "src")
	SET(OBFUSCATE "grade-confuse")
	FOREACH(folder ${CXXFOLDERS})
		EXEC_PROGRAM( "${OBFUSCATE} -P ${CXXPROJ} ${folder}")
	ENDFOREACH(folder ${CXXFOLDERS})
ENDIF (OBFUSCATE STREQUAL "yes")

#MESSAGE(STATUS "Module paths ${CMAKE_MODULE_PATH}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Project Name ${PROJECT_NAME}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "CXX Compile Flags ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "CXX Load Flags ${CMAKE_CXX_LDFLAGS}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Build System: ${CMAKE_HOST_SYSTEM}")
MESSAGE(STATUS "Build System Name: ${CMAKE_HOST_SYSTEM_NAME}")
MESSAGE(STATUS "Build System Version: ${CMAKE_HOST_SYSTEM_VERSION}")
MESSAGE(STATUS "Build System Processor: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Target System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Target System Name: ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "Target System Version: ${CMAKE_SYSTEM_VERSION}")
MESSAGE(STATUS "Target System Processor: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "----------------------------------------------------------")

